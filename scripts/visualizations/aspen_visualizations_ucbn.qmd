---
title: "Aspen Preliminary Visualizations"
format: 
  html:
    embed-resources: true
execute: 
  echo: false
  message: false
  warning: false
---

```{r, message=FALSE}
library(tidyverse)
library(khroma)
library(viridis)
library(plotly)
aspen <- aspen::fetchAndWrangleUCBNAspen()
```

```{r}
# find number of plots in each watershed

# TODO: update this to Allsites tables once not used sites are removed

# aspen$data$AllSites <- aspen$data$AllSites %>%
#   filter(Site %in% aspen$data$SiteVisit$Site) %>%
#       # Find Number of plot in each watershed
#   group_by(Stratum) %>%
#   mutate(numberOfPlotsInWatershed = n()) %>%
#   ungroup() %>%
#   group_by(Community) %>%
#   # Find number of plots in each community
#   mutate(numberOfPlotsInCommunity = n()) %>%
#   ungroup()

# aspen$data$SiteVisit <- aspen$data$SiteVisit %>%
#   #filter(Site %in% aspen$data$SiteVisit$Site) %>%
#       # Find Number of plot in each watershed
#   group_by(Stand) %>%
#   mutate(numberOfPlotsInStand = n_distinct(Unique_ID)) %>%
#   ungroup() 

numberOfPlots <- aspen$data$SiteVisit %>%
  group_by(Stand) %>%
  summarise(numberOfPlotsInStand = n_distinct(Unique_ID))
```


# Stand

#### Average Density of Live Aspens

```{r}
# 4 meter radius of plots
# area = pi*r^2
# density = #/ha

# this is finding the density for each plot and then averaging it for the communities

aspenDensity2 <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  # filter for POTR5
  filter(SpeciesCode == "POPTRE") %>%
  # Add up LIVE POTR5 for each row
  mutate(density = (Class1+Class2+Class3+Class4+Class5)/(pi * 4^2/10000),
         totalLiveTrees = Class1+Class2+Class3+Class4+Class5) %>%
  # summarize total POTR5 divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Stand) %>%
  summarise(avgDensity = mean(density),
            sd = sd(density), 
            numberOfPlots = n()) %>%
  # Find values for error bars
  mutate(ymin = avgDensity - sd,
         ymax = avgDensity + sd)

aspenDensityGraph <- aspenDensity2 %>%
  ggplot(aes(x= Stand, y = avgDensity, label = numberOfPlots)) +
  geom_col() +
  geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2) +
  theme_minimal() +
  labs(title = "Average Aspen Density",
       x = "Stand", y = "Density (#/ha)") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315))

plotly::ggplotly(aspenDensityGraph)
```

#### Density of Live Aspens Boxplot

```{r}
aspenDensity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  # filter for POTR5
  filter(SpeciesCode == "POPTRE") %>%
  # Find density for each plot
  mutate(density = (Class1+Class2+Class3+Class4+Class5)/((pi * 4^2)/10000)) %>%
# Filter out communities with not enough points to graph
group_by(Stand) %>%
  mutate(numberOfPlots = n()) %>%
  ungroup() %>%
  filter(numberOfPlots >2)


# aspenDensityGraph <- aspenDensity %>%
#   ggplot(aes(x= Stand, y = density, fill = Stand, label = numberOfPlots)) +
#     geom_violin() +
#     geom_boxplot(width=0.1, color="grey", alpha=0.5) +
#   stat_summary(fun = "mean", colour = "red", size = 2, geom = "point") +
#   scale_fill_viridis(discrete = TRUE) +
#   theme_minimal() +
#   labs(title = "Aspen Density",
#        x = "Stand", y = "Density (#/ha)") + 
#   theme(plot.title = element_text(hjust = 0.5)) +
#   theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0.0)) + 
#   guides(fill="none")
# 
# aspenDensityGraph
```


```{r}
aspenDensityGraph <- aspenDensity %>%
  ggplot(aes(x= Stand, y = density, label = numberOfPlots)) +
    #geom_violin() +
  geom_boxplot(width=0.3, outlier.shape = NA) +
  geom_point(alpha = 0.5, position=position_jitter(height=.5, width=.25)) +
  theme_minimal() +
  labs(title = "Aspen Density",
       x = "Stand", y = "Density (#/ha)") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0.0)) + 
  guides(fill="none")

aspenDensityGraph
```


```{r}
fig <- aspenDensity %>%
  plotly::plot_ly(
    x = ~Stand,
    y = ~density,
    split = ~Stand,
    color = ~Stand,
    colors = "Dark2",
    type = 'violin',
    box = list(visible = T),
    meanline = list(visible = T)) 

fig <- fig %>%
  layout(
    xaxis = list(
      title = "Stand"),
    yaxis = list(
      title = "Density",
      zeroline = F,
      range = list(0, 40000)),
    showlegend = FALSE)

fig
```



#### Average Density of Conifers

```{r}
# 4 meter radius of plots
# area = pi*r^2
# density = #/ha

# this is finding the density for each plot and then averaging it for the communities


# TODO: make it so the different plots in the community are aggregated before density is calculated
aspenDensity2 <- aspen$data$Observations %>%
  # left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  # filter for POTR5
  filter(SpeciesCode != "POPTRE" & !is.na(SpeciesCode)) %>%
  # Aggregate to get the total number of conifers at each site
  group_by(Unique_ID, Stand) %>%
  summarise(Class1 = sum(Class1),
            Class2 = sum(Class2),
            Class3 = sum(Class3),
            Class4 = sum(Class4),
            Class5 = sum(Class5)) %>%
  ungroup() %>%
    # Add up LIVE POTR5 for each row
  mutate(density = (Class1+Class2+Class3+Class4+Class5)/(pi * 4^2/10000),
         totalLiveTrees = Class1+Class2+Class3+Class4+Class5) %>%
  # summarize total POTR5 divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Stand) %>%
  summarise(avgDensity = mean(density),
            sd = sd(density), 
            numberOfPlots = n()) %>%
  # Find values for error bars
  mutate(ymin = avgDensity - sd,
         ymax = avgDensity + sd)

aspenDensityGraph <- aspenDensity2 %>%
  ggplot(aes(x= Stand, y = avgDensity, label = numberOfPlots)) +
  geom_col() +
  geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2) +
  theme_minimal() +
  labs(title = "Average Conifer Density",
       x = "Stand", y = "Density (#/ha)") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315))

plotly::ggplotly(aspenDensityGraph)
```



```{r}
#### Density of Conifers per Plot


# coniferDensity <- aspen$data$Observations %>%
#   #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
#   left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
#   # filter for POTR5
#   filter(SpeciesCode != "POPTRE" & !is.na(SpeciesCode)) %>%
#     # Aggregate to get the total number of conifers at each site
#   group_by(Unique_ID, Stand) %>%
#   summarise(Class1 = sum(Class1),
#             Class2 = sum(Class2),
#             Class3 = sum(Class3),
#             Class4 = sum(Class4),
#             Class5 = sum(Class5)) %>%
#   ungroup() %>%
#   # Find density for each plot
#   mutate(density = (Class1+Class2+Class3+Class4+Class5)/((pi * 4^2)/10000)) %>%
# # Filter out communities with not enough points to graph
# group_by(Stand) %>%
#   mutate(numberOfPlots = n()) %>%
#   ungroup() %>%
#   filter(numberOfPlots >2)
# 
# 
# coniferDensityGraph <- coniferDensity %>%
#   ggplot(aes(x= Stand, y = density, fill = Stand, label = numberOfPlots)) +
#     geom_violin() +
#     geom_boxplot(width=0.1, color="grey", alpha=0.2) +
#   stat_summary(fun = "mean", colour = "red", size = 2, geom = "point") +
#   scale_fill_viridis(discrete = TRUE) +
#   theme_minimal() +
#   labs(title = "Conifer Density",
#        x = "Stand", y = "Density (#/ha)") + 
#   theme(plot.title = element_text(hjust = 0.5)) +
#   theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0.0)) + 
#   guides(fill="none")
# 
# coniferDensityGraph
```

#### Density of Aspen vs Conifers

```{r}
compareDensity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
    # filter out one species that is not aspen or conifer
  filter(!is.na(SpeciesCode)) %>%
  mutate(isAspen = case_when(
    SpeciesCode == "POPTRE" ~ 'Aspen',
    .default = 'Conifer'
  )) %>%
    # Aggregate to get the total number of conifers at each site
  group_by(Unique_ID, Stand, isAspen) %>%
  summarise(Class1 = sum(Class1),
            Class2 = sum(Class2),
            Class3 = sum(Class3),
            Class4 = sum(Class4),
            Class5 = sum(Class5)) %>%
  ungroup() %>%
  # Add up live trees for each row
  mutate(density = (Class1+Class2+Class3+Class4+Class5)/(pi * 4^2/10000)) %>%
  group_by(Stand, isAspen) %>%
  summarise(avgDensity = mean(density),
            sd = sd(density), 
            numberOfPlots = n()) %>%
  # Find values for error bars
  mutate(ymin = avgDensity - sd,
         ymax = avgDensity + sd)


compareDensityGraph <- compareDensity %>%
  ggplot(aes(x= Stand, y = avgDensity, fill = as.factor(isAspen), label = numberOfPlots)) +
  geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(0.9)) +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315))  +
  scale_fill_light()

plotly::ggplotly(compareDensityGraph)
```


#### Density of Aspen vs Conifers per Plot

```{r}
compareDensity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
    # filter out one species that is not aspen or conifer
  filter(!is.na(SpeciesCode)) %>%
  mutate(isAspen = case_when(
    SpeciesCode == "POPTRE" ~ 'Aspen',
    .default = 'Conifer'
  )) %>% 
      # Aggregate to get the total number of conifers at each site
  group_by(Unique_ID, Stand, isAspen) %>%
  summarise(Class1 = sum(Class1),
            Class2 = sum(Class2),
            Class3 = sum(Class3),
            Class4 = sum(Class4),
            Class5 = sum(Class5)) %>%
  ungroup() %>%
    # Find density for each plot
  mutate(density = (Class1+Class2+Class3+Class4+Class5)/((pi * 4^2)/10000)) 
# %>%
#   filter(Community != "Curl-leaf Mountain-mahogany Shrubland & Woodland Complex")

compareDensityGraph <- compareDensity %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  #geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315))  +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))

compareDensityGraph
```

#### Density of Aspen Age Groups

```{r}
ageGroupCommunity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  # filter for POTR5
  filter(SpeciesCode == "POPTRE") %>%
  # Pivot longer to make calculations easier
  pivot_longer(cols = Class1:Class6, names_to = "class", values_to = "treeCount") %>%
  mutate(density = treeCount/(pi * 4^2/10000)) %>%
  # summarize POTR5 for each age group divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Stand, class) %>%
    summarise(avgDensity = mean(density),
            sd = sd(density), 
            numberOfPlots = n()) %>%
  # Find values for error bars
  mutate(ymin = avgDensity - sd,
         ymax = avgDensity + sd)

ageGroupCommunityGraph <- ageGroupCommunity %>%
  ggplot(aes(x= Stand, y = avgDensity, fill = factor(class))) +
  geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.3, position = position_dodge(0.9)) +
  theme_minimal() +
  labs(title = "Age Class Density",
       x = "Stand", y = "Density (#/ha)",
       fill = "Age Class") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315))

plotly::ggplotly(ageGroupCommunityGraph)
```


#### Density of Aspen Age Groups Boxplot

```{r}
ageGroupCommunity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  # filter for POTR5
  filter(SpeciesCode == "POPTRE") %>%
  # Pivot longer to make calculations easier
  pivot_longer(cols = Class1:Class6, names_to = "class", values_to = "treeCount") %>%
  mutate(density = treeCount/(pi * 4^2/10000)) 
# %>%
#   filter(Community != "Curl-leaf Mountain-mahogany Shrubland & Woodland Complex")


ageGroupCommunityGraph <- ageGroupCommunity %>%
  ggplot(aes(x= Stand, y = density, fill = factor(class))) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Age Class Density",
       x = "Stand", y = "Density (#/ha)",
       fill = "Age Class") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))

ageGroupCommunityGraph
```

#### Density of Conifer Age Groups

```{r}
ageGroupCommunity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  # filter for POTR5
  filter(SpeciesCode != "POPTRE" & !is.na(SpeciesCode)) %>%
  # Pivot longer to make calculations easier
  pivot_longer(cols = Class1:Class6, names_to = "class", values_to = "treeCount") %>%
  mutate(density = treeCount/(pi * 4^2/10000)) 
# %>%
#   # summarize POTR5 for each age group divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
#   group_by(Community, class) %>%
#     summarise(avgDensity = mean(density),
#             sd = sd(density), 
#             numberOfPlots = n()) %>%
#   # Find values for error bars
#   mutate(ymin = avgDensity - sd,
#          ymax = avgDensity + sd)

ageGroupCommunityGraph <- ageGroupCommunity %>%
  ggplot(aes(x= Stand, y = density, fill = factor(class))) +
  geom_boxplot() +
  # geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.5, position = position_dodge(0.9)) +
  theme_minimal() +
  labs(title = "Age Class Density",
       x = "Stand", y = "Density (#/ha)",
       fill = "Age Class") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315))

ageGroupCommunityGraph
```


#### Density of Aspen vs Conifer Age Groups

```{r}
compareAgeDensity <- aspen$data$Observations %>%
  #left_join(select(aspen$data$SiteVisit, any_of(c("numberOfPlotsInStand", "globalid"))), by = c("parentglobalid" = "globalid")) %>%
  left_join(select(numberOfPlots, any_of(c("Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
    # filter out one species that is not aspen or conifer
  filter(!is.na(SpeciesCode)) %>%
  mutate(isAspen = case_when(
    SpeciesCode == "POPTRE" ~ 'Aspen',
    .default = 'Conifer'
  )) %>%
    # Find density for each plot
  mutate(density = (Class1+Class2+Class3+Class4+Class5)/((pi * 4^2)/10000)) %>%  
# Pivot longer to make calculations easier
  pivot_longer(cols = Class1:Class6, names_to = "class", values_to = "treeCount") %>%
  mutate(density = treeCount/(pi * 4^2/10000))
```

::: panel-tabset
##### Class 1
```{r}
compareAgeDensityGraph <- compareAgeDensity %>%
  filter(class == "Class1") %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  scale_fill_viridis(discrete = TRUE) +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density Class 1",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0)) +
  ylim(c(0, 20000))

compareAgeDensityGraph
```
##### Class 2
```{r}
compareAgeDensityGraph <- compareAgeDensity %>%
  filter(class == "Class2") %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  #geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density Class 2",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))  +
  ylim(c(0, 20000))

compareAgeDensityGraph
```

##### Class 3
```{r}
compareAgeDensityGraph <- compareAgeDensity %>%
  filter(class == "Class3") %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  #geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density Class 3",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))  +
  ylim(c(0, 20000))

compareAgeDensityGraph
```

##### Class 4
```{r}
compareAgeDensityGraph <- compareAgeDensity %>%
  filter(class == "Class4") %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  #geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density Class 4",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))  +
  ylim(c(0, 20000))

compareAgeDensityGraph
```

##### Class 5
```{r}
compareAgeDensityGraph <- compareAgeDensity %>%
  filter(class == "Class5") %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  #geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density Class 5",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))  +
  ylim(c(0, 20000))

compareAgeDensityGraph
```

##### Class 6
```{r}
compareAgeDensityGraph <- compareAgeDensity %>%
  filter(class == "Class6") %>%
  ggplot(aes(x= Stand, y = density, fill = as.factor(isAspen))) +
  geom_boxplot() +
  #geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density Class 6",
       x = "Stand", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()  +
  theme(axis.text.x = element_text(size = 6, angle = 315, hjust = 0))  +
  ylim(c(0, 20000))

compareAgeDensityGraph
```

:::

#### Frequency of Disturbances

```{r}
# Area of plots in which a disturbance occurs / total area of plots (for each community)

disturbancesFrequency <- aspen$data$Disturbances %>%
  group_by(Unique_ID, Stand) %>%
  # Group data so every site with a disturbance has only one entry
  summarise(Disturbance = first(Disturbance)) %>%
  # Join disturbance and all site data
  left_join(select(numberOfPlots, any_of(c("Unique_ID", "Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  group_by(Stand) %>%
  # Find out how many plots in a watershed were disturbed
  summarise(plotsWithDisturbances = sum(!is.na(Disturbance)), 
            numberOfPlotsInStand = first(numberOfPlotsInStand),
            frequency = (first(plotsWithDisturbances) * pi * 4^2)/(first(numberOfPlotsInStand) * pi * 4^2)*100)

disturbancesGraph <- disturbancesFrequency %>%
  ggplot(aes(x = Stand, y = frequency)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Disturbance Frequency",
       x = "Stand", y = "Frequency") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315))

plotly::ggplotly(disturbancesGraph)
```


#### Frequency of Pests

```{r}
# Area of plots in which a disturbance occurs / total area of plots (for each community)

pestFrequency <- aspen$data$Pests %>%
  group_by(Unique_ID, Stand) %>%
  # Group data so every site with a disturbance has only one entry
  summarise(Pest = first(Pest)) %>%
  # Join disturbance and all site data
  left_join(select(numberOfPlots, any_of(c("Unique_ID", "Stand", "numberOfPlotsInStand"))), by = join_by(Stand)) %>%
  group_by(Stand) %>%
  # Find out how many plots in a watershed were disturbed
  summarise(plotsWithPests = sum(!is.na(Pest)), 
            numberOfPlotsInStand = first(numberOfPlotsInStand),
            frequency = (first(plotsWithPests) * pi * 4^2)/(first(numberOfPlotsInStand) * pi * 4^2)*100)

pestGraph <- pestFrequency %>%
  ggplot(aes(x = Stand, y = frequency)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Pest Frequency",
       x = "Stand", y = "Frequency") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(size = 6, angle = 315))

plotly::ggplotly(pestGraph)
```

# Park

#### Density of Live Aspens

```{r}
# 4 meter radius of plots
# area = pi*r^2
# denisty = #/ha


  
aspenParkDensity <- aspen$data$Observations %>%
  # Find number of plot in each park
  group_by(Park) %>%
  mutate(numberOfPlots = n_distinct(Unique_ID)) %>%
  ungroup() %>%
  # filter for POTR5
  filter(SpeciesCode == "POPTRE") %>%
  # Add up LIVE POTR5 for each row
  mutate(totalLiveTrees = Class1+Class2+Class3+Class4+Class5) %>%
  # summarize total POTR5 divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Park) %>%
  summarise(density = sum(totalLiveTrees)/((first(numberOfPlots) * pi * 4^2)/10000),
            sumLiveTrees = sum(totalLiveTrees),
            numberOfPlots = first(numberOfPlots))


aspenParkDensityGraph <- aspenParkDensity %>%
  ggplot(aes(x= Park, y = density)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Aspen Density",
       x = "Park", y = "Density (#/ha)") + 
  theme(plot.title = element_text(hjust = 0.5))

plotly::ggplotly(aspenParkDensityGraph)
```

#### Density of Conifers

```{r}
# 4 meter radius of plots
# area = pi*r^2
# denisty = #/ha


  
coniferParkDensity <- aspen$data$Observations %>%
  # Find number of plot in each park
  group_by(Park) %>%
  mutate(numberOfPlots = n_distinct(Unique_ID)) %>%
  ungroup() %>%
  # filter for POTR5
  filter(SpeciesCode != "POPTRE" & SpeciesCode != "BEUC2") %>%
  # Add up LIVE POTR5 for each row
  mutate(totalLiveTrees = Class1+Class2+Class3+Class4+Class5) %>%
  # summarize total POTR5 divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Park) %>%
  summarise(density = sum(totalLiveTrees)/((first(numberOfPlots) * pi * 4^2)/10000),
            sumLiveTrees = sum(totalLiveTrees),
            numberOfPlots = first(numberOfPlots))


coniferParkDensityGraph <- coniferParkDensity %>%
  ggplot(aes(x= Park, y = density)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Conifer Density",
       x = "Park", y = "Density (#/ha)") + 
  theme(plot.title = element_text(hjust = 0.5))

plotly::ggplotly(coniferParkDensityGraph)
```


#### Density of Aspen vs Conifers

```{r}
compareDensity <- aspen$data$Observations %>%
    # Find number of plot in each park
  group_by(Park) %>%
  mutate(numberOfPlots = n_distinct(Unique_ID)) %>%
  ungroup() %>%
  # filter out one species that is not aspen or conifer
  filter(SpeciesCode != "BEUC2") %>%
  mutate(isAspen = case_when(
    SpeciesCode == "POPTRE" ~ 'Aspen',
    .default = 'Conifer'
  )) %>%
  # Add up live trees for each row
  mutate(liveTrees = Class1+Class2+Class3+Class4+Class5) %>%
  # summarize total POTR5 divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Park, isAspen) %>%
  summarise(density = sum(liveTrees)/((first(numberOfPlots) * pi * 4^2)/10000),
            totalLiveTrees = sum(liveTrees),
            numberOfPlots = first(numberOfPlots))


compareDensityGraph <- compareDensity %>%
  ggplot(aes(x= Park, y = density, fill = as.factor(isAspen))) +
  geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Aspen and Conifer Density",
       x = "Park", y = "Density (#/ha)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()

plotly::ggplotly(compareDensityGraph)
```

#### Density of Aspen Age Groups

```{r}
ageGroupPark <- aspen$data$Observations %>%
  # Find number of plot in each park
  group_by(Park) %>%
  mutate(numberOfPlots = n_distinct(Unique_ID)) %>%
  ungroup() %>%
  # filter for POTR5
  filter(SpeciesCode == "POPTRE") %>%
  # Pivot longer to make calculations easier
  pivot_longer(cols = Class1:Class6, names_to = "class", values_to = "treeCount") %>%
  # summarize POTR5 for each age group divided by area converted to ha (area = (number of plots * pi * r^2)/10000 )
  group_by(Park, class) %>%
  summarise(density = sum(treeCount)/((first(numberOfPlots) * pi * 4^2)/10000),
            sumLiveTrees = sum(treeCount),
            numberOfPlots = first(numberOfPlots)) 


ageGroupParkGraph <- ageGroupPark %>%
  ggplot(aes(x= Park, y = density, fill = factor(class))) +
  geom_col(position = position_dodge(preserve = "single"), stat = "identity") +
  theme_minimal() +
  labs(title = "Age Class Density",
       x = "Park", y = "Density (#/ha)",
       fill = "Age Class") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_fill_light()

plotly::ggplotly(ageGroupParkGraph)
```


#### Frequency of Disturbances

```{r}
# Area of plots in which a disturbance occurs / total area of plots (for each park)

disturbancesFrequency <- aspen$data$Disturbances %>%
  group_by(Park, Unique_ID) %>%
  # Group data so every site with a disturbance has only one entry
  summarise(Disturbance = first(Disturbance)) %>%
  # # Join disturbance and all site data
  # full_join(select(aspen$data$AllSites, any_of(c("Site", "Park"))), by = join_by(Site)) %>%
  group_by(Park) %>%
  # Find out how many plots in a watershed were disturbed
  summarise(plotsWithDisturbances = sum(!is.na(Disturbance)), 
            numberOfPlotsInPark = n(),
            frequency = (first(plotsWithDisturbances) * pi * 4^2)/(first(numberOfPlotsInPark) * pi * 4^2)*100)

disturbancesGraph <- disturbancesFrequency %>%
  ggplot(aes(x = Park, y = frequency)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Disturbance Frequency",
       x = "Park", y = "Frequency") + 
  theme(plot.title = element_text(hjust = 0.5))

plotly::ggplotly(disturbancesGraph)
```

#### Frequency of Pests

```{r}
# Area of plots in which a disturbance occurs / total area of plots (for each park)

pestFrequency <- aspen$data$Pests %>%
  group_by(Park, Unique_ID) %>%
  # Group data so every site with a disturbance has only one entry
  summarise(Pest = first(Pest)) %>%
  # Join disturbance and all site data
  # full_join(select(aspen$data$AllSites, any_of(c("Site", "Park"))), by = join_by(Site)) %>%
  group_by(Park) %>%
  # Find out how many plots in a watershed were disturbed
  summarise(plotsWithPests = sum(!is.na(Pest)), 
            numberOfPlotsInPark = n(),
            frequency = (first(plotsWithPests) * pi * 4^2)/(first(numberOfPlotsInPark) * pi * 4^2)*100)

pestGraph <- pestFrequency %>%
  ggplot(aes(x = Park, y = frequency)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Pest Frequency",
       x = "Park", y = "Frequency") + 
  theme(plot.title = element_text(hjust = 0.5))

plotly::ggplotly(pestGraph)
```

